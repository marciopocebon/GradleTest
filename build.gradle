sourceSets {
    main {
        output.classesDir = 'build/classes'
    }
    test {
        output.classesDir = 'build/junit-classes'
    }
}

configurations {
    node
    nodeexe
}

configurations.node {
    description = "empty configuration for our node dependencies"
}

configurations.nodeexe {
    description = "empty configuration for node executable dependencies"
}

def nodeVersion = '4.8.7'

dependencies {
    nodeexe group: 'node', name: 'node', version: nodeVersion, ext: 'zip'
    node group: 'node', name: 'typescript', version: '2.9.2', ext: 'zip'
}

static def isLinux() {
    return org.gradle.internal.os.OperatingSystem.current() != org.gradle.internal.os.OperatingSystem.WINDOWS
}

static def isWindows() {
    return org.gradle.internal.os.OperatingSystem.current() == org.gradle.internal.os.OperatingSystem.WINDOWS
}

def nodeExecutable() {
    return "${buildDir}/node/bin/" + (isWindows() ? "node.exe" : "node")
}

task unpackNodeModules() {
    inputs.files project.configurations.node.findAll { it.name.endsWith(".zip")  }.each { fi -> fi.absolutePath }
    outputs.files "${buildDir}/node/node_modules/"

    doLast {
        project.configurations.node.findAll { it.name.endsWith(".zip") && !it.name.equals("node-"+nodeVersion+".zip") }.each { fi ->
            println "Unpacking " + fi.name
            copy {
                from zipTree(fi.absolutePath)
                into file("${buildDir}/node/node_modules/"+ fi.name.replace(".zip", "").replaceFirst(/-[\d\.]+/, ""))
            }
        }
    }
}

task unpackNode(dependsOn: unpackNodeModules) {
    inputs.files project.configurations.nodeexe.findAll { it.name.endsWith(".zip")  }.each { fi -> fi.absolutePath }
    outputs.files "${buildDir}/node/bin/"

    doLast {
        project.configurations.nodeexe.findAll { it.name.endsWith(".zip") }.each { fi ->
            println "Unpacking node " + nodeVersion + " binaries " + fi.name
            def excludeFilter = isLinux() ? ['bin/node.exe','bin/node.lib'] : ['bin/node']
            copy {
                from zipTree(fi.absolutePath)
                exclude excludeFilter
                into file("./build/node")
            }
            if (isLinux()) {
                copy {
                    from zipTree(fi.absolutePath)
                    into file("./build/node")
                    include('bin/node')
                    fileMode 0755
                }
            }
        }
    }
}

class TsCompileTask extends DefaultTask {

    @InputFiles
    FileTree source

    @OutputDirectory
    File outputDir

    @TaskAction
    void compile() {
        println "compiling TypeScript files..."
        project.exec {
            ignoreExitValue = true
            executable = project.nodeExecutable()

            args "${project.buildDir}/node/node_modules/typescript/bin/tsc"
            args "--p"
            args "${project.projectDir}/tsconfig.json"
            args "--outDir"
            args outputDir.toString()
        }
    }
}

task tsCompile(type: TsCompileTask, dependsOn: unpackNode) {
    source = fileTree("src/main/resources/com/kapowtech/rl2graph/")
    outputDir = file("${buildDir}/resources/main/")
}

compileJava.dependsOn tsCompile

configurations.all { conf ->
    dependencies.all { dep ->
        if (!(dep instanceof ProjectDependency) && !(dep instanceof FileCollectionDependency)
                && dep.name != 'findbugs') {
            dep.transitive = false
        }
    }
}

classes.doLast {
    // this is needed for ThirdPartyLicenseTest
    copy {
        into "$buildDir/dependencies/lib"
        from configurations.runtime
        // annotations-3* and annotations-1* are findbugs annotations and we are not allowed to distribute them.
        exclude ('annotations-3*.jar', 'annotations-1*.jar')
    }
}

jar {
    exclude('**/*.ts')
    destinationDir = file('build')
    archiveName = 'kapowtech-rl2graph.jar'
    manifest {
        attributes 'Title': 'Kapow Technologies RL2 Graph',
                'Version': getProductVersion(),
                'Vendor' : 'Kapow Technologies',
                'Built-By' : System.getProperty("user.name")
    }
}

